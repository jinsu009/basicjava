package e_oop;

public class VariableInit {
	
	//2020-01-06
	
	//변수를 초기화 하는 방법에 대해 알아보자 

	//명시적 초기화 : 선언과 초기화를 동시에 진행
		int var = 10;
		
		static int classVar = 20;
		
		
		
		//초기화 블럭 : 여러 문장이 필요한 초기화를 해야할 때 사용한다.
		{
			for(int i = 1; i <= 10; i++){
				var += i;
			}
		} 
		static {
			classVar = 30;
		}
		//인스턴스 블럭은 그냥 {}를 사용하지만 static는 {}앞에 static를 붙여준다. 
	
		
		/*
		 * << 생성자 >>
		 * - 클래스와 같은 이름의 메서드
		 * - 객체를 생성하면서 필요한 작업이 있을때 사용한다.(인스턴스 변수 초기화)
		 * - 파라미터를 받아서 초기화 하고싶을 때 사용한다.
		 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
		 * - 직접 선언해주지 않으면 컴파일러가 자동으로!! 기본 생성자(파라미터가 없는 생성자)를 만들어준다.
		 * - 생성자는 리턴타입이 없다.
		 */
		
		VariableInit(int var){
			//괄호안에서 인스턴스변수를 초기화 할때 사용방법 ,, 주로 파라미터를 할당받아 초기화 할 때 사용
			//클래스명과 동일하게 생성
			
			//this.var = var; 
			
			for(int i = 1; i <= var; i++){
				this.var += i;
			}
			//this : 클래스의 인스턴스 주소가 저장된 변수
			//인스턴스(전역)변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해
			//인스턴스 변수 앞에 붙여서 사용한다.
		}
		
		//오버로딩 : 같은 이름의 메서드를 정의하는 것
		//이름은 같지만 파라미터의 갯수나 타입이 달라야 한다.
		VariableInit(){
//			for(int i = 1; i <= 100; i++){
//				this.var += i;
//			}
			this(100); //int타입의 파라미터가 하나 있는 생성자 호출  -> VariableInit(int var)
			//this() : 생성자에서 다른 생성자를 호출할때 사용한다.
			//this() 이전의 코드가 의미 없는 코드가 될 수 있기 때문에 this()는
			//생성자의 첫줄에서만 사용할 수 있다. *****
			
			//'명시적 -> 초기화 -> 생성자'  순으로
			//실행되지만 실제로는 더위에 코딩된 순서대로 실행된다.
			//(명시적이랑 초기화블럭만)
			
			
			//오버로딩 -> 클래스는 같지만 다른 파라미터 사용할때 
			
		
		}

}
